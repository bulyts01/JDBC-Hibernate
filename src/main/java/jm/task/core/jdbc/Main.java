package jm.task.core.jdbc;

import jm.task.core.jdbc.dao.UserDaoJDBCImpl;
import jm.task.core.jdbc.model.User;


import java.sql.*;
import java.util.List;

public class Main {
    public static void main(String[] args) throws SQLException {
        // реализуйте алгоритм здесь

        //Реализация через UserDaoJDBCImpl

        UserDaoJDBCImpl userDaoJDBC = new UserDaoJDBCImpl();

//        userDaoJDBC.createUsersTable();

//        userDaoJDBC.dropUsersTable();

        User user = new User();
        user.setName("Semen");
        user.setLastName("Bulytov");
        user.setAge((byte) 36);
        userDaoJDBC.saveUser(user.getName(), user.getLastName(), user.getAge());
//
//        System.out.println(userDaoJDBC.getAllUsers());

        //Реализация через UserServiceImpl

//        UserServiceImpl userService = new UserServiceImpl();

//        userService.dropUsersTable();

//        userService.createUsersTable();
//
//        userService.saveUser("Semen", "Bulytov", (byte) 36);
//        userService.saveUser("Sevak", "Martirisyan", (byte) 32);
//        userService.saveUser("Roman", "Rogov", (byte) 37);
//        userService.saveUser("Aidar", "Orozbekov", (byte) 25);

//        userService.removeUserById(2);

//        List<User> listUser =  userService.getAllUsers();
//        for(User user : listUser) {
//            System.out.println(user);
//        }

//        userService.cleanUsersTable();


//        Class<Driver> driverClass = Driver.class;
//
//        try (var connection = Util.open();
//             var statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE)
//        ) {
//            System.out.println(connection.getSchema());
//            System.out.println(connection.getTransactionIsolation());

//        String sqlCreateTable = """
//                CREATE TABLE IF NOT EXISTS users (
//                id SERIAL PRIMARY KEY,
//                name VARCHAR(128) NOT NULL,
//                last_name VARCHAR(128) NOT NULL,
//                age INT NOT NULL)
//                """;
//        String sqlInsert = """
//                INSERT INTO users (name, last_name, age)
//                VALUES  ('Semen', 'Bulytov', 36),
//                        ('Sevak', 'Martirosyan', 35),
//                        ('Roman', 'Rogov', 37),
//                        ('Aidar', 'Orozbekov', 25)
//                """;
//        String sqlUpdate = """
//                UPDATE users
//                SET age = 30
//                WHERE name = 'Semen'
//                """;
//        String sqlDropTable = """
//                DROP TABLE users
//                """;
//            var executeResult = statement.execute(sqlInsert);
//            метод execute используется реже чем executeUpdate, потому что возвращает boolean
//            System.out.println(statement.getUpdateCount());
//            используем этот метод чтобы возвратить количество измененных строк
//            var executeResult = statement.executeUpdate(sqlUpdate); // возвращает тип int - количество измененных строк
//            System.out.println(executeResult);

        //Используем ResultSet как объект после выборки:
//            String sqlSelect = """
//                    SELECT * FROM users
//                    """;
//            var executeResult = statement.executeQuery(sqlSelect);
//            while(executeResult.next()) {
//                System.out.println(executeResult.getLong("id"));
//                System.out.println(executeResult.getString("name"));
//                System.out.println(executeResult.getInt("age"));
//                System.out.println("-----------------");
//            }


//            String sqlInsert = """
//                    INSERT INTO users (name) VALUES ('autogenerated')
//                    """;
//            var executeResult = statement.executeUpdate(sqlInsert, Statement.RETURN_GENERATED_KEYS);
//            var generatedKeys = statement.getGeneratedKeys();
//            if (generatedKeys.next()) {
//                var generatedId = generatedKeys.getInt(1);
//                System.out.println(generatedId);
//            }
//        }


    }
}
